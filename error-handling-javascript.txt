1. cannot use mechanism try...catch to catch exception in asynchronous

    // THIS WILL NOT WORK: common mistake
    const fs = require('fs');

    try {
      fs.readFile('/some/file/that/does-not-exist', (err, data) => {
        // mistaken assumption: throwing here...
        if (err) {
          throw err;
        }
      });
    } catch(err) {
      // This will not catch the throw!
      console.log(err);
    }

2. catch error using callback in async APIs
    const fs = require('fs');

    function nodeStyleCallback(err, data) {
        if (err) {
            console.error('There was an error', err);
            return;
        }
        console.log(data);
    }

    fs.readFile('/some/file/that/does-not-exist', nodeStyleCallback);
    fs.readFile('/some/file/that/does-exist', nodeStyleCallback)
3. Deal with error in javascript

https://www.joyent.com/developers/node/design/errorss

* Syntax error (Null-pointer exception, not defined variable....)
    Nodejs automatically report this kind of error with ReferenceError
    The ReferenceError object represents an error when a non-existent variable is referenced.

* System Error (File is not found)
    Nodejs throw this error via Error object with added properties


* User-error (thrown intentionally by developer)
    Promise allow you to wrap error for others developers

* How to catch & rethrow error
    Promise.catch( (error) => {
        error handling here

        return new Promise.reject(reason);


    });

The general rule is that a function may deliver operational errors synchronously (e.g., by throwing) or
asynchronously (by passing them to a callback or emitting error on an EventEmitter),
but it should not do both.
